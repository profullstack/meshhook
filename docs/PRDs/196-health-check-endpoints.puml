@startuml
!theme plain

package "MeshHook System" {
    [Supabase\n(Postgres + Realtime)] as Supabase
    [SvelteKit\n(SSR/API)] as SvelteKit
    [Workers\n(Orchestrator + HTTP Executor)] as Workers
    [Health Check API] as HealthAPI
}

database "Postgres" as Postgres {
    [schema.sql]
}

cloud {
    [External Services\n(Supabase Storage, Edge)] as ExternalServices
}

node "Client" {
    [Web Browser]
}

node "Monitoring" {
    [Metrics & Logging]
    [Alerting System]
}

WebBrowser --> SvelteKit : Request\n(Health Check)
SvelteKit --> HealthAPI : Validate Request
HealthAPI --> Supabase : Query Health Status
Supabase --> HealthAPI : Return Status
HealthAPI --> SvelteKit : Response\n(HTTP Status Code)
SvelteKit --> WebBrowser : Display Health Status

HealthAPI .down.> Metrics & Logging : Logs Health Check
Metrics & Logging --> AlertingSystem : Trigger Alerts\n(if any issues)

Supabase --> Postgres : Uses
Supabase --> ExternalServices : Integrates with

note right of HealthAPI
  Health check endpoints are implemented here.
  They validate incoming requests and query
  the system's health status from Supabase.
end note

note right of Supabase
  Supabase acts as the backend providing
  Postgres database services and Realtime
  updates.
end note

note over WebBrowser, SvelteKit
  SvelteKit handles SSR and API requests,
  including health checks from the web browser.
end note

note over Workers
  Workers handle background tasks but are
  not directly involved in health checks.
end note

note over Metrics & Logging, AlertingSystem
  Monitoring systems log health check activities
  and alert on critical failures.
end note

@enduml